<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.24%)</title><rect x="0.0481%" y="293" width="0.2404%" height="15" fill="rgb(227,0,7)"/><text x="0.2981%" y="303.50"></text></g><g><title>lemonvm_repl`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.29%)</title><rect x="0.3365%" y="293" width="0.2885%" height="15" fill="rgb(217,0,24)"/><text x="0.5865%" y="303.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (3 samples, 0.14%)</title><rect x="11.6346%" y="245" width="0.1442%" height="15" fill="rgb(221,193,54)"/><text x="11.8846%" y="255.50"></text></g><g><title>lemonvm_repl`&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="12.0673%" y="197" width="0.1442%" height="15" fill="rgb(248,212,6)"/><text x="12.3173%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (3 samples, 0.14%)</title><rect x="12.3077%" y="197" width="0.1442%" height="15" fill="rgb(208,68,35)"/><text x="12.5577%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::as_leaf (3 samples, 0.14%)</title><rect x="12.3077%" y="181" width="0.1442%" height="15" fill="rgb(232,128,0)"/><text x="12.5577%" y="191.50"></text></g><g><title>lemonvm_repl`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (20 samples, 0.96%)</title><rect x="11.5385%" y="277" width="0.9615%" height="15" fill="rgb(207,160,47)"/><text x="11.7885%" y="287.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::get (19 samples, 0.91%)</title><rect x="11.5865%" y="261" width="0.9135%" height="15" fill="rgb(228,23,34)"/><text x="11.8365%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::search::search_tree (13 samples, 0.62%)</title><rect x="11.8750%" y="245" width="0.6250%" height="15" fill="rgb(218,30,26)"/><text x="12.1250%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::search::search_node (11 samples, 0.53%)</title><rect x="11.9712%" y="229" width="0.5288%" height="15" fill="rgb(220,122,19)"/><text x="12.2212%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::collections::btree::search::search_linear (9 samples, 0.43%)</title><rect x="12.0673%" y="213" width="0.4327%" height="15" fill="rgb(250,228,42)"/><text x="12.3173%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.19%)</title><rect x="12.6923%" y="197" width="0.1923%" height="15" fill="rgb(240,193,28)"/><text x="12.9423%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.19%)</title><rect x="12.6923%" y="181" width="0.1923%" height="15" fill="rgb(216,20,37)"/><text x="12.9423%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.14%)</title><rect x="12.7404%" y="165" width="0.1442%" height="15" fill="rgb(206,188,39)"/><text x="12.9904%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.14%)</title><rect x="12.7404%" y="149" width="0.1442%" height="15" fill="rgb(217,207,13)"/><text x="12.9904%" y="159.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.48%)</title><rect x="12.5481%" y="213" width="0.4808%" height="15" fill="rgb(231,73,38)"/><text x="12.7981%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 0.67%)</title><rect x="12.5481%" y="229" width="0.6731%" height="15" fill="rgb(225,20,46)"/><text x="12.7981%" y="239.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.19%)</title><rect x="13.0288%" y="213" width="0.1923%" height="15" fill="rgb(210,31,41)"/><text x="13.2788%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.77%)</title><rect x="13.4135%" y="165" width="0.7692%" height="15" fill="rgb(221,200,47)"/><text x="13.6635%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (14 samples, 0.67%)</title><rect x="13.5096%" y="149" width="0.6731%" height="15" fill="rgb(226,26,5)"/><text x="13.7596%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.67%)</title><rect x="13.5096%" y="133" width="0.6731%" height="15" fill="rgb(249,33,26)"/><text x="13.7596%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.67%)</title><rect x="13.5096%" y="117" width="0.6731%" height="15" fill="rgb(235,183,28)"/><text x="13.7596%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.62%)</title><rect x="13.5577%" y="101" width="0.6250%" height="15" fill="rgb(221,5,38)"/><text x="13.8077%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.58%)</title><rect x="13.6058%" y="85" width="0.5769%" height="15" fill="rgb(247,18,42)"/><text x="13.8558%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.14%)</title><rect x="14.0385%" y="69" width="0.1442%" height="15" fill="rgb(241,131,45)"/><text x="14.2885%" y="79.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (5 samples, 0.24%)</title><rect x="14.1827%" y="165" width="0.2404%" height="15" fill="rgb(249,31,29)"/><text x="14.4327%" y="175.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (4 samples, 0.19%)</title><rect x="14.6154%" y="149" width="0.1923%" height="15" fill="rgb(225,111,53)"/><text x="14.8654%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (11 samples, 0.53%)</title><rect x="14.4231%" y="165" width="0.5288%" height="15" fill="rgb(238,160,17)"/><text x="14.6731%" y="175.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (3 samples, 0.14%)</title><rect x="14.8077%" y="149" width="0.1442%" height="15" fill="rgb(214,148,48)"/><text x="15.0577%" y="159.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (53 samples, 2.55%)</title><rect x="12.5000%" y="277" width="2.5481%" height="15" fill="rgb(232,36,49)"/><text x="12.7500%" y="287.50">le..</text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (53 samples, 2.55%)</title><rect x="12.5000%" y="261" width="2.5481%" height="15" fill="rgb(209,103,24)"/><text x="12.7500%" y="271.50">le..</text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (53 samples, 2.55%)</title><rect x="12.5000%" y="245" width="2.5481%" height="15" fill="rgb(229,88,8)"/><text x="12.7500%" y="255.50">le..</text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (38 samples, 1.83%)</title><rect x="13.2212%" y="229" width="1.8269%" height="15" fill="rgb(213,181,19)"/><text x="13.4712%" y="239.50">l..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (37 samples, 1.78%)</title><rect x="13.2692%" y="213" width="1.7788%" height="15" fill="rgb(254,191,54)"/><text x="13.5192%" y="223.50">l..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 1.73%)</title><rect x="13.3173%" y="197" width="1.7308%" height="15" fill="rgb(241,83,37)"/><text x="13.5673%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 1.73%)</title><rect x="13.3173%" y="181" width="1.7308%" height="15" fill="rgb(233,36,39)"/><text x="13.5673%" y="191.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.14%)</title><rect x="15.0481%" y="277" width="0.1442%" height="15" fill="rgb(226,3,54)"/><text x="15.2981%" y="287.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.24%)</title><rect x="18.9904%" y="245" width="0.2404%" height="15" fill="rgb(245,192,40)"/><text x="19.2404%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (34 samples, 1.63%)</title><rect x="20.6250%" y="229" width="1.6346%" height="15" fill="rgb(238,167,29)"/><text x="20.8750%" y="239.50"></text></g><g><title>lemonvm_repl`core::ptr::unique::Unique&lt;T&gt;::as_ptr (7 samples, 0.34%)</title><rect x="21.9231%" y="213" width="0.3365%" height="15" fill="rgb(232,182,51)"/><text x="22.1731%" y="223.50"></text></g><g><title>lemonvm_repl`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (21 samples, 1.01%)</title><rect x="22.2596%" y="229" width="1.0096%" height="15" fill="rgb(231,60,39)"/><text x="22.5096%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_ptr (94 samples, 4.52%)</title><rect x="19.2308%" y="245" width="4.5192%" height="15" fill="rgb(208,69,12)"/><text x="19.4808%" y="255.50">lemon..</text></g><g><title>lemonvm_repl`core::ptr::unique::Unique&lt;T&gt;::as_ptr (10 samples, 0.48%)</title><rect x="23.2692%" y="229" width="0.4808%" height="15" fill="rgb(235,93,37)"/><text x="23.5192%" y="239.50"></text></g><g><title>lemonvm_repl`core::ptr::slice_from_raw_parts (7 samples, 0.34%)</title><rect x="23.7981%" y="245" width="0.3365%" height="15" fill="rgb(213,116,39)"/><text x="24.0481%" y="255.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (156 samples, 7.50%)</title><rect x="17.9327%" y="261" width="7.5000%" height="15" fill="rgb(222,207,29)"/><text x="18.1827%" y="271.50">lemonvm_re..</text></g><g><title>lemonvm_repl`core::slice::from_raw_parts (27 samples, 1.30%)</title><rect x="24.1346%" y="245" width="1.2981%" height="15" fill="rgb(206,96,30)"/><text x="24.3846%" y="255.50"></text></g><g><title>lemonvm_repl`core::ptr::slice_from_raw_parts (22 samples, 1.06%)</title><rect x="24.3750%" y="229" width="1.0577%" height="15" fill="rgb(218,138,4)"/><text x="24.6250%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.19%)</title><rect x="25.4327%" y="261" width="0.1923%" height="15" fill="rgb(250,191,14)"/><text x="25.6827%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.14%)</title><rect x="25.6250%" y="261" width="0.1442%" height="15" fill="rgb(239,60,40)"/><text x="25.8750%" y="271.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (58 samples, 2.79%)</title><rect x="25.7692%" y="261" width="2.7885%" height="15" fill="rgb(206,27,48)"/><text x="26.0192%" y="271.50">le..</text></g><g><title>lemonvm_repl`&lt;usize as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (23 samples, 1.11%)</title><rect x="27.4519%" y="245" width="1.1058%" height="15" fill="rgb(225,35,8)"/><text x="27.7019%" y="255.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (292 samples, 14.04%)</title><rect x="15.1923%" y="277" width="14.0385%" height="15" fill="rgb(250,213,24)"/><text x="15.4423%" y="287.50">lemonvm_repl`&lt;alloc::..</text></g><g><title>lemonvm_repl`core::slice::from_raw_parts (14 samples, 0.67%)</title><rect x="28.5577%" y="261" width="0.6731%" height="15" fill="rgb(247,123,22)"/><text x="28.8077%" y="271.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (4 samples, 0.19%)</title><rect x="29.6635%" y="149" width="0.1923%" height="15" fill="rgb(231,138,38)"/><text x="29.9135%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.19%)</title><rect x="29.6635%" y="133" width="0.1923%" height="15" fill="rgb(231,145,46)"/><text x="29.9135%" y="143.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.53%)</title><rect x="29.3750%" y="181" width="0.5288%" height="15" fill="rgb(251,118,11)"/><text x="29.6250%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.24%)</title><rect x="29.6635%" y="165" width="0.2404%" height="15" fill="rgb(217,147,25)"/><text x="29.9135%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (13 samples, 0.62%)</title><rect x="29.3750%" y="197" width="0.6250%" height="15" fill="rgb(247,81,37)"/><text x="29.6250%" y="207.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.29%)</title><rect x="30.1442%" y="133" width="0.2885%" height="15" fill="rgb(209,12,38)"/><text x="30.3942%" y="143.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (5 samples, 0.24%)</title><rect x="30.1923%" y="117" width="0.2404%" height="15" fill="rgb(227,1,9)"/><text x="30.4423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.24%)</title><rect x="30.1923%" y="101" width="0.2404%" height="15" fill="rgb(248,47,43)"/><text x="30.4423%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.24%)</title><rect x="30.1923%" y="85" width="0.2404%" height="15" fill="rgb(221,10,30)"/><text x="30.4423%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.24%)</title><rect x="30.1923%" y="69" width="0.2404%" height="15" fill="rgb(210,229,1)"/><text x="30.4423%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.24%)</title><rect x="30.1923%" y="53" width="0.2404%" height="15" fill="rgb(222,148,37)"/><text x="30.4423%" y="63.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::new (3 samples, 0.14%)</title><rect x="30.7212%" y="117" width="0.1442%" height="15" fill="rgb(234,67,33)"/><text x="30.9712%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (3 samples, 0.14%)</title><rect x="30.8654%" y="117" width="0.1442%" height="15" fill="rgb(247,98,35)"/><text x="31.1154%" y="127.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 1.78%)</title><rect x="29.3269%" y="245" width="1.7788%" height="15" fill="rgb(247,138,52)"/><text x="29.5769%" y="255.50">l..</text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (36 samples, 1.73%)</title><rect x="29.3750%" y="229" width="1.7308%" height="15" fill="rgb(213,79,30)"/><text x="29.6250%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (36 samples, 1.73%)</title><rect x="29.3750%" y="213" width="1.7308%" height="15" fill="rgb(246,177,23)"/><text x="29.6250%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 1.11%)</title><rect x="30.0000%" y="197" width="1.1058%" height="15" fill="rgb(230,62,27)"/><text x="30.2500%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (22 samples, 1.06%)</title><rect x="30.0481%" y="181" width="1.0577%" height="15" fill="rgb(216,154,8)"/><text x="30.2981%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 1.06%)</title><rect x="30.0481%" y="165" width="1.0577%" height="15" fill="rgb(244,35,45)"/><text x="30.2981%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 1.06%)</title><rect x="30.0481%" y="149" width="1.0577%" height="15" fill="rgb(251,115,12)"/><text x="30.2981%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (11 samples, 0.53%)</title><rect x="30.5769%" y="133" width="0.5288%" height="15" fill="rgb(240,54,50)"/><text x="30.8269%" y="143.50"></text></g><g><title>lemonvm_repl`&lt;liblemonvm::binary::function::Function as core::clone::Clone&gt;::clone (40 samples, 1.92%)</title><rect x="29.2308%" y="261" width="1.9231%" height="15" fill="rgb(233,84,52)"/><text x="29.4808%" y="271.50">l..</text></g><g><title>lemonvm_repl`&lt;liblemonvm::binary::constant::Constant as core::clone::Clone&gt;::clone (42 samples, 2.02%)</title><rect x="29.2308%" y="277" width="2.0192%" height="15" fill="rgb(207,117,47)"/><text x="29.4808%" y="287.50">l..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.14%)</title><rect x="31.8269%" y="213" width="0.1442%" height="15" fill="rgb(249,43,39)"/><text x="32.0769%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_ptr (5 samples, 0.24%)</title><rect x="31.8269%" y="229" width="0.2404%" height="15" fill="rgb(209,38,44)"/><text x="32.0769%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.43%)</title><rect x="31.7308%" y="245" width="0.4327%" height="15" fill="rgb(236,212,23)"/><text x="31.9808%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (7 samples, 0.34%)</title><rect x="33.1250%" y="181" width="0.3365%" height="15" fill="rgb(242,79,21)"/><text x="33.3750%" y="191.50"></text></g><g><title>lemonvm_repl`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 0.14%)</title><rect x="33.3173%" y="165" width="0.1442%" height="15" fill="rgb(211,96,35)"/><text x="33.5673%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.67%)</title><rect x="33.4615%" y="165" width="0.6731%" height="15" fill="rgb(253,215,40)"/><text x="33.7115%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (11 samples, 0.53%)</title><rect x="33.6058%" y="149" width="0.5288%" height="15" fill="rgb(211,81,21)"/><text x="33.8558%" y="159.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (7 samples, 0.34%)</title><rect x="33.7981%" y="133" width="0.3365%" height="15" fill="rgb(208,190,38)"/><text x="34.0481%" y="143.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::wrapping_sub (3 samples, 0.14%)</title><rect x="33.9904%" y="117" width="0.1442%" height="15" fill="rgb(235,213,38)"/><text x="34.2404%" y="127.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (15 samples, 0.72%)</title><rect x="33.4615%" y="181" width="0.7212%" height="15" fill="rgb(237,122,38)"/><text x="33.7115%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::Iter&lt;T&gt;::as_slice (22 samples, 1.06%)</title><rect x="34.3269%" y="181" width="1.0577%" height="15" fill="rgb(244,218,35)"/><text x="34.5769%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::from_raw_parts (5 samples, 0.24%)</title><rect x="35.1442%" y="165" width="0.2404%" height="15" fill="rgb(240,68,47)"/><text x="35.3942%" y="175.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (14 samples, 0.67%)</title><rect x="35.7212%" y="165" width="0.6731%" height="15" fill="rgb(210,16,53)"/><text x="35.9712%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.48%)</title><rect x="35.9135%" y="149" width="0.4808%" height="15" fill="rgb(235,124,12)"/><text x="36.1635%" y="159.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::copy_from_slice (25 samples, 1.20%)</title><rect x="35.3846%" y="181" width="1.2019%" height="15" fill="rgb(224,169,11)"/><text x="35.6346%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::len (3 samples, 0.14%)</title><rect x="36.4423%" y="165" width="0.1442%" height="15" fill="rgb(250,166,2)"/><text x="36.6923%" y="175.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (87 samples, 4.18%)</title><rect x="32.6442%" y="197" width="4.1827%" height="15" fill="rgb(242,216,29)"/><text x="32.8942%" y="207.50">lemon..</text></g><g><title>lemonvm_repl`core::slice::from_raw_parts_mut (3 samples, 0.14%)</title><rect x="36.6827%" y="181" width="0.1442%" height="15" fill="rgb(230,116,27)"/><text x="36.9327%" y="191.50"></text></g><g><title>lemonvm_repl`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (3 samples, 0.14%)</title><rect x="36.8750%" y="197" width="0.1442%" height="15" fill="rgb(228,99,48)"/><text x="37.1250%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (4 samples, 0.19%)</title><rect x="37.4519%" y="181" width="0.1923%" height="15" fill="rgb(253,11,6)"/><text x="37.7019%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (108 samples, 5.19%)</title><rect x="32.5000%" y="213" width="5.1923%" height="15" fill="rgb(247,143,39)"/><text x="32.7500%" y="223.50">lemonv..</text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::iter (13 samples, 0.62%)</title><rect x="37.0673%" y="197" width="0.6250%" height="15" fill="rgb(236,97,10)"/><text x="37.3173%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.14%)</title><rect x="37.9808%" y="181" width="0.1442%" height="15" fill="rgb(233,208,19)"/><text x="38.2308%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.19%)</title><rect x="39.9038%" y="69" width="0.1923%" height="15" fill="rgb(216,164,2)"/><text x="40.1538%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 1.30%)</title><rect x="39.8077%" y="85" width="1.2981%" height="15" fill="rgb(220,129,5)"/><text x="40.0577%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 1.01%)</title><rect x="40.0962%" y="69" width="1.0096%" height="15" fill="rgb(242,17,10)"/><text x="40.3462%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.24%)</title><rect x="40.8654%" y="53" width="0.2404%" height="15" fill="rgb(242,107,0)"/><text x="41.1154%" y="63.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (35 samples, 1.68%)</title><rect x="39.4712%" y="133" width="1.6827%" height="15" fill="rgb(251,28,31)"/><text x="39.7212%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (31 samples, 1.49%)</title><rect x="39.6635%" y="117" width="1.4904%" height="15" fill="rgb(233,223,10)"/><text x="39.9135%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (31 samples, 1.49%)</title><rect x="39.6635%" y="101" width="1.4904%" height="15" fill="rgb(215,21,27)"/><text x="39.9135%" y="111.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (53 samples, 2.55%)</title><rect x="39.0385%" y="149" width="2.5481%" height="15" fill="rgb(232,23,21)"/><text x="39.2885%" y="159.50">le..</text></g><g><title>lemonvm_repl`core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.14%)</title><rect x="41.4423%" y="133" width="0.1442%" height="15" fill="rgb(244,5,23)"/><text x="41.6923%" y="143.50"></text></g><g><title>lemonvm_repl`&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (3 samples, 0.14%)</title><rect x="41.5865%" y="149" width="0.1442%" height="15" fill="rgb(226,81,46)"/><text x="41.8365%" y="159.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (8 samples, 0.38%)</title><rect x="41.7308%" y="149" width="0.3846%" height="15" fill="rgb(247,70,30)"/><text x="41.9808%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align_unchecked (7 samples, 0.34%)</title><rect x="42.7404%" y="117" width="0.3365%" height="15" fill="rgb(212,68,19)"/><text x="42.9904%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::new (12 samples, 0.58%)</title><rect x="42.5962%" y="133" width="0.5769%" height="15" fill="rgb(240,187,13)"/><text x="42.8462%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align (13 samples, 0.62%)</title><rect x="43.4135%" y="117" width="0.6250%" height="15" fill="rgb(223,113,26)"/><text x="43.6635%" y="127.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::is_power_of_two (7 samples, 0.34%)</title><rect x="43.7019%" y="101" width="0.3365%" height="15" fill="rgb(206,192,2)"/><text x="43.9519%" y="111.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::count_ones (7 samples, 0.34%)</title><rect x="43.7019%" y="85" width="0.3365%" height="15" fill="rgb(241,108,4)"/><text x="43.9519%" y="95.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::padding_needed_for (7 samples, 0.34%)</title><rect x="44.0865%" y="117" width="0.3365%" height="15" fill="rgb(247,173,49)"/><text x="44.3365%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (29 samples, 1.39%)</title><rect x="43.1731%" y="133" width="1.3942%" height="15" fill="rgb(224,114,35)"/><text x="43.4231%" y="143.50"></text></g><g><title>lemonvm_repl`core::result::Result&lt;T,E&gt;::unwrap (3 samples, 0.14%)</title><rect x="44.4231%" y="117" width="0.1442%" height="15" fill="rgb(245,159,27)"/><text x="44.6731%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::align (9 samples, 0.43%)</title><rect x="45.0000%" y="117" width="0.4327%" height="15" fill="rgb(245,172,44)"/><text x="45.2500%" y="127.50"></text></g><g><title>lemonvm_repl`core::num::NonZeroUsize::get (4 samples, 0.19%)</title><rect x="45.2404%" y="101" width="0.1923%" height="15" fill="rgb(236,23,11)"/><text x="45.4904%" y="111.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::wrapping_add (4 samples, 0.19%)</title><rect x="45.6250%" y="101" width="0.1923%" height="15" fill="rgb(205,117,38)"/><text x="45.8750%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::padding_needed_for (9 samples, 0.43%)</title><rect x="45.5288%" y="117" width="0.4327%" height="15" fill="rgb(237,72,25)"/><text x="45.7788%" y="127.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::wrapping_sub (3 samples, 0.14%)</title><rect x="45.8173%" y="101" width="0.1442%" height="15" fill="rgb(244,70,9)"/><text x="46.0673%" y="111.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::checked_mul (6 samples, 0.29%)</title><rect x="46.0577%" y="117" width="0.2885%" height="15" fill="rgb(217,125,39)"/><text x="46.3077%" y="127.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::overflowing_mul (4 samples, 0.19%)</title><rect x="46.1538%" y="101" width="0.1923%" height="15" fill="rgb(235,36,10)"/><text x="46.4038%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (90 samples, 4.33%)</title><rect x="42.2115%" y="149" width="4.3269%" height="15" fill="rgb(251,123,47)"/><text x="42.4615%" y="159.50">lemon..</text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (41 samples, 1.97%)</title><rect x="44.5673%" y="133" width="1.9712%" height="15" fill="rgb(221,13,13)"/><text x="44.8173%" y="143.50">l..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (183 samples, 8.80%)</title><rect x="38.1731%" y="165" width="8.7981%" height="15" fill="rgb(238,131,9)"/><text x="38.4231%" y="175.50">lemonvm_repl..</text></g><g><title>lemonvm_repl`core::ptr::non_null::NonNull&lt;T&gt;::cast (7 samples, 0.34%)</title><rect x="46.6346%" y="149" width="0.3365%" height="15" fill="rgb(211,50,8)"/><text x="46.8846%" y="159.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (3 samples, 0.14%)</title><rect x="46.9712%" y="165" width="0.1442%" height="15" fill="rgb(245,182,24)"/><text x="47.2212%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (199 samples, 9.57%)</title><rect x="37.6923%" y="213" width="9.5673%" height="15" fill="rgb(242,14,37)"/><text x="37.9423%" y="223.50">lemonvm_repl`a..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (196 samples, 9.42%)</title><rect x="37.8365%" y="197" width="9.4231%" height="15" fill="rgb(246,228,12)"/><text x="38.0865%" y="207.50">lemonvm_repl`..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (190 samples, 9.13%)</title><rect x="38.1250%" y="181" width="9.1346%" height="15" fill="rgb(213,55,15)"/><text x="38.3750%" y="191.50">lemonvm_repl`..</text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (330 samples, 15.87%)</title><rect x="31.4423%" y="261" width="15.8654%" height="15" fill="rgb(209,9,3)"/><text x="31.6923%" y="271.50">lemonvm_repl`&lt;alloc::vec..</text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (315 samples, 15.14%)</title><rect x="32.1635%" y="245" width="15.1442%" height="15" fill="rgb(230,59,30)"/><text x="32.4135%" y="255.50">lemonvm_repl`alloc::sli..</text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (315 samples, 15.14%)</title><rect x="32.1635%" y="229" width="15.1442%" height="15" fill="rgb(209,121,21)"/><text x="32.4135%" y="239.50">lemonvm_repl`alloc::sli..</text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.19%)</title><rect x="47.3558%" y="229" width="0.1923%" height="15" fill="rgb(220,109,13)"/><text x="47.6058%" y="239.50"></text></g><g><title>lemonvm_repl`core::slice::from_raw_parts (3 samples, 0.14%)</title><rect x="47.4038%" y="213" width="0.1442%" height="15" fill="rgb(232,18,1)"/><text x="47.6538%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.24%)</title><rect x="47.9327%" y="165" width="0.2404%" height="15" fill="rgb(215,41,42)"/><text x="48.1827%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.19%)</title><rect x="47.9808%" y="149" width="0.1923%" height="15" fill="rgb(224,123,36)"/><text x="48.2308%" y="159.50"></text></g><g><title>lemonvm_repl`core::slice::Iter&lt;T&gt;::as_slice (5 samples, 0.24%)</title><rect x="48.2212%" y="165" width="0.2404%" height="15" fill="rgb(240,125,3)"/><text x="48.4712%" y="175.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::len (5 samples, 0.24%)</title><rect x="48.5096%" y="165" width="0.2404%" height="15" fill="rgb(205,98,50)"/><text x="48.7596%" y="175.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (23 samples, 1.11%)</title><rect x="47.7404%" y="181" width="1.1058%" height="15" fill="rgb(205,185,37)"/><text x="47.9904%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 1.30%)</title><rect x="47.7404%" y="197" width="1.2981%" height="15" fill="rgb(238,207,15)"/><text x="47.9904%" y="207.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::iter (3 samples, 0.14%)</title><rect x="48.8942%" y="181" width="0.1442%" height="15" fill="rgb(213,199,42)"/><text x="49.1442%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (23 samples, 1.11%)</title><rect x="49.7115%" y="85" width="1.1058%" height="15" fill="rgb(235,201,11)"/><text x="49.9615%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 1.01%)</title><rect x="49.8077%" y="69" width="1.0096%" height="15" fill="rgb(207,46,11)"/><text x="50.0577%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.91%)</title><rect x="49.9038%" y="53" width="0.9135%" height="15" fill="rgb(241,35,35)"/><text x="50.1538%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.29%)</title><rect x="50.5288%" y="37" width="0.2885%" height="15" fill="rgb(243,32,47)"/><text x="50.7788%" y="47.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (26 samples, 1.25%)</title><rect x="49.6154%" y="117" width="1.2500%" height="15" fill="rgb(247,202,23)"/><text x="49.8654%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (24 samples, 1.15%)</title><rect x="49.7115%" y="101" width="1.1538%" height="15" fill="rgb(219,102,11)"/><text x="49.9615%" y="111.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (31 samples, 1.49%)</title><rect x="49.4712%" y="133" width="1.4904%" height="15" fill="rgb(243,110,44)"/><text x="49.7212%" y="143.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (3 samples, 0.14%)</title><rect x="50.9615%" y="133" width="0.1442%" height="15" fill="rgb(222,74,54)"/><text x="51.2115%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::new (5 samples, 0.24%)</title><rect x="51.4423%" y="117" width="0.2404%" height="15" fill="rgb(216,99,12)"/><text x="51.6923%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align (5 samples, 0.24%)</title><rect x="51.7788%" y="101" width="0.2404%" height="15" fill="rgb(226,22,26)"/><text x="52.0288%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::padding_needed_for (4 samples, 0.19%)</title><rect x="52.0192%" y="101" width="0.1923%" height="15" fill="rgb(217,163,10)"/><text x="52.2692%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (12 samples, 0.58%)</title><rect x="51.6827%" y="117" width="0.5769%" height="15" fill="rgb(213,25,53)"/><text x="51.9327%" y="127.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align_unchecked (3 samples, 0.14%)</title><rect x="52.5962%" y="101" width="0.1442%" height="15" fill="rgb(252,105,26)"/><text x="52.8462%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::padding_needed_for (6 samples, 0.29%)</title><rect x="52.7404%" y="101" width="0.2885%" height="15" fill="rgb(220,39,43)"/><text x="52.9904%" y="111.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::wrapping_sub (3 samples, 0.14%)</title><rect x="52.8846%" y="85" width="0.1442%" height="15" fill="rgb(229,68,48)"/><text x="53.1346%" y="95.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::checked_mul (3 samples, 0.14%)</title><rect x="53.0769%" y="101" width="0.1442%" height="15" fill="rgb(252,8,32)"/><text x="53.3269%" y="111.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (44 samples, 2.12%)</title><rect x="51.1538%" y="133" width="2.1154%" height="15" fill="rgb(223,20,43)"/><text x="51.4038%" y="143.50">l..</text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (21 samples, 1.01%)</title><rect x="52.2596%" y="117" width="1.0096%" height="15" fill="rgb(229,81,49)"/><text x="52.5096%" y="127.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (91 samples, 4.38%)</title><rect x="49.1346%" y="149" width="4.3750%" height="15" fill="rgb(236,28,36)"/><text x="49.3846%" y="159.50">lemon..</text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (129 samples, 6.20%)</title><rect x="47.3558%" y="245" width="6.2019%" height="15" fill="rgb(249,185,26)"/><text x="47.6058%" y="255.50">lemonvm_..</text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (125 samples, 6.01%)</title><rect x="47.5481%" y="229" width="6.0096%" height="15" fill="rgb(249,174,33)"/><text x="47.7981%" y="239.50">lemonvm_..</text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (125 samples, 6.01%)</title><rect x="47.5481%" y="213" width="6.0096%" height="15" fill="rgb(233,201,37)"/><text x="47.7981%" y="223.50">lemonvm_..</text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (94 samples, 4.52%)</title><rect x="49.0385%" y="197" width="4.5192%" height="15" fill="rgb(221,78,26)"/><text x="49.2885%" y="207.50">lemon..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (93 samples, 4.47%)</title><rect x="49.0865%" y="181" width="4.4712%" height="15" fill="rgb(250,127,30)"/><text x="49.3365%" y="191.50">lemon..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (93 samples, 4.47%)</title><rect x="49.0865%" y="165" width="4.4712%" height="15" fill="rgb(230,49,44)"/><text x="49.3365%" y="175.50">lemon..</text></g><g><title>lemonvm_repl`&lt;liblemonvm::binary::function::Function as core::clone::Clone&gt;::clone (135 samples, 6.49%)</title><rect x="47.3558%" y="261" width="6.4904%" height="15" fill="rgb(229,67,23)"/><text x="47.6058%" y="271.50">lemonvm_r..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.14%)</title><rect x="53.7019%" y="245" width="0.1442%" height="15" fill="rgb(249,83,47)"/><text x="53.9519%" y="255.50"></text></g><g><title>lemonvm_repl`&lt;liblemonvm::vm::VMClosure as core::clone::Clone&gt;::clone (478 samples, 22.98%)</title><rect x="31.2500%" y="277" width="22.9808%" height="15" fill="rgb(215,43,3)"/><text x="31.5000%" y="287.50">lemonvm_repl`&lt;liblemonvm::vm::VMClos..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.34%)</title><rect x="53.8942%" y="261" width="0.3365%" height="15" fill="rgb(238,154,13)"/><text x="54.1442%" y="271.50"></text></g><g><title>lemonvm_repl`&lt;liblemonvm::vm::VMClosureStatus as core::cmp::PartialEq&gt;::eq (13 samples, 0.62%)</title><rect x="54.2308%" y="277" width="0.6250%" height="15" fill="rgb(219,56,2)"/><text x="54.4808%" y="287.50"></text></g><g><title>lemonvm_repl`&lt;liblemonvm::vm::value::Value as core::clone::Clone&gt;::clone (35 samples, 1.68%)</title><rect x="54.8558%" y="277" width="1.6827%" height="15" fill="rgb(233,0,4)"/><text x="55.1058%" y="287.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (5 samples, 0.24%)</title><rect x="56.7308%" y="213" width="0.2404%" height="15" fill="rgb(235,30,7)"/><text x="56.9808%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.24%)</title><rect x="56.9712%" y="213" width="0.2404%" height="15" fill="rgb(250,79,13)"/><text x="57.2212%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.19%)</title><rect x="57.0192%" y="197" width="0.1923%" height="15" fill="rgb(211,146,34)"/><text x="57.2692%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.14%)</title><rect x="57.0673%" y="181" width="0.1442%" height="15" fill="rgb(228,22,38)"/><text x="57.3173%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::Iter&lt;T&gt;::as_slice (6 samples, 0.29%)</title><rect x="57.3077%" y="213" width="0.2885%" height="15" fill="rgb(235,168,5)"/><text x="57.5577%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (36 samples, 1.73%)</title><rect x="56.7308%" y="229" width="1.7308%" height="15" fill="rgb(221,155,16)"/><text x="56.9808%" y="239.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::copy_from_slice (18 samples, 0.87%)</title><rect x="57.5962%" y="213" width="0.8654%" height="15" fill="rgb(215,215,53)"/><text x="57.8462%" y="223.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (14 samples, 0.67%)</title><rect x="57.7885%" y="197" width="0.6731%" height="15" fill="rgb(223,4,10)"/><text x="58.0385%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.67%)</title><rect x="57.7885%" y="181" width="0.6731%" height="15" fill="rgb(234,103,6)"/><text x="58.0385%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (37 samples, 1.78%)</title><rect x="56.7308%" y="245" width="1.7788%" height="15" fill="rgb(227,97,0)"/><text x="56.9808%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.24%)</title><rect x="58.6058%" y="133" width="0.2404%" height="15" fill="rgb(234,150,53)"/><text x="58.8558%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.19%)</title><rect x="58.6538%" y="117" width="0.1923%" height="15" fill="rgb(228,201,54)"/><text x="58.9038%" y="127.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (6 samples, 0.29%)</title><rect x="58.6058%" y="165" width="0.2885%" height="15" fill="rgb(222,22,37)"/><text x="58.8558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.29%)</title><rect x="58.6058%" y="149" width="0.2885%" height="15" fill="rgb(237,53,32)"/><text x="58.8558%" y="159.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.38%)</title><rect x="58.5577%" y="181" width="0.3846%" height="15" fill="rgb(233,25,53)"/><text x="58.8077%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (3 samples, 0.14%)</title><rect x="58.9423%" y="181" width="0.1442%" height="15" fill="rgb(210,40,34)"/><text x="59.1923%" y="191.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align (4 samples, 0.19%)</title><rect x="59.3269%" y="149" width="0.1923%" height="15" fill="rgb(241,220,44)"/><text x="59.5769%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (7 samples, 0.34%)</title><rect x="59.2788%" y="165" width="0.3365%" height="15" fill="rgb(235,28,35)"/><text x="59.5288%" y="175.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (15 samples, 0.72%)</title><rect x="59.1346%" y="181" width="0.7212%" height="15" fill="rgb(210,56,17)"/><text x="59.3846%" y="191.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (5 samples, 0.24%)</title><rect x="59.6154%" y="165" width="0.2404%" height="15" fill="rgb(224,130,29)"/><text x="59.8654%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (32 samples, 1.54%)</title><rect x="58.5096%" y="245" width="1.5385%" height="15" fill="rgb(235,212,8)"/><text x="58.7596%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (32 samples, 1.54%)</title><rect x="58.5096%" y="229" width="1.5385%" height="15" fill="rgb(223,33,50)"/><text x="58.7596%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 1.54%)</title><rect x="58.5096%" y="213" width="1.5385%" height="15" fill="rgb(219,149,13)"/><text x="58.7596%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (32 samples, 1.54%)</title><rect x="58.5096%" y="197" width="1.5385%" height="15" fill="rgb(250,156,29)"/><text x="58.7596%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (70 samples, 3.37%)</title><rect x="56.7308%" y="261" width="3.3654%" height="15" fill="rgb(216,193,19)"/><text x="56.9808%" y="271.50">lem..</text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (71 samples, 3.41%)</title><rect x="56.7308%" y="277" width="3.4135%" height="15" fill="rgb(216,135,14)"/><text x="56.9808%" y="287.50">lem..</text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_ptr (3 samples, 0.14%)</title><rect x="60.1442%" y="261" width="0.1442%" height="15" fill="rgb(241,47,5)"/><text x="60.3942%" y="271.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (5 samples, 0.24%)</title><rect x="60.3365%" y="245" width="0.2404%" height="15" fill="rgb(233,42,35)"/><text x="60.5865%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.24%)</title><rect x="60.3365%" y="229" width="0.2404%" height="15" fill="rgb(231,13,6)"/><text x="60.5865%" y="239.50"></text></g><g><title>lemonvm_repl`core::ptr::read (13 samples, 0.62%)</title><rect x="60.2885%" y="261" width="0.6250%" height="15" fill="rgb(207,181,40)"/><text x="60.5385%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.34%)</title><rect x="60.5769%" y="245" width="0.3365%" height="15" fill="rgb(254,173,49)"/><text x="60.8269%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::pop (18 samples, 0.87%)</title><rect x="60.1442%" y="277" width="0.8654%" height="15" fill="rgb(221,1,38)"/><text x="60.3942%" y="287.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (3 samples, 0.14%)</title><rect x="61.1538%" y="261" width="0.1442%" height="15" fill="rgb(206,124,46)"/><text x="61.4038%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (12 samples, 0.58%)</title><rect x="61.8750%" y="181" width="0.5769%" height="15" fill="rgb(249,21,11)"/><text x="62.1250%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.58%)</title><rect x="61.8750%" y="165" width="0.5769%" height="15" fill="rgb(222,201,40)"/><text x="62.1250%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (12 samples, 0.58%)</title><rect x="61.8750%" y="149" width="0.5769%" height="15" fill="rgb(235,61,29)"/><text x="62.1250%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.43%)</title><rect x="62.0192%" y="133" width="0.4327%" height="15" fill="rgb(219,207,3)"/><text x="62.2692%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9 samples, 0.43%)</title><rect x="62.0192%" y="117" width="0.4327%" height="15" fill="rgb(222,56,46)"/><text x="62.2692%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.14%)</title><rect x="62.3077%" y="101" width="0.1442%" height="15" fill="rgb(239,76,54)"/><text x="62.5577%" y="111.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (19 samples, 0.91%)</title><rect x="61.6346%" y="197" width="0.9135%" height="15" fill="rgb(231,124,27)"/><text x="61.8846%" y="207.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (5 samples, 0.24%)</title><rect x="62.8846%" y="181" width="0.2404%" height="15" fill="rgb(249,195,6)"/><text x="63.1346%" y="191.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (19 samples, 0.91%)</title><rect x="62.6923%" y="197" width="0.9135%" height="15" fill="rgb(237,174,47)"/><text x="62.9423%" y="207.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (10 samples, 0.48%)</title><rect x="63.1250%" y="181" width="0.4808%" height="15" fill="rgb(206,201,31)"/><text x="63.3750%" y="191.50"></text></g><g><title>lemonvm_repl`core::cmp::max (4 samples, 0.19%)</title><rect x="63.6058%" y="197" width="0.1923%" height="15" fill="rgb(231,57,52)"/><text x="63.8558%" y="207.50"></text></g><g><title>lemonvm_repl`core::cmp::Ord::max (4 samples, 0.19%)</title><rect x="63.6058%" y="181" width="0.1923%" height="15" fill="rgb(248,177,22)"/><text x="63.8558%" y="191.50"></text></g><g><title>lemonvm_repl`core::cmp::max_by (4 samples, 0.19%)</title><rect x="63.6058%" y="165" width="0.1923%" height="15" fill="rgb(215,211,37)"/><text x="63.8558%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::grow (54 samples, 2.60%)</title><rect x="61.3462%" y="213" width="2.5962%" height="15" fill="rgb(241,128,51)"/><text x="61.5962%" y="223.50">le..</text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (56 samples, 2.69%)</title><rect x="61.2981%" y="261" width="2.6923%" height="15" fill="rgb(227,165,31)"/><text x="61.5481%" y="271.50">le..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 2.69%)</title><rect x="61.2981%" y="245" width="2.6923%" height="15" fill="rgb(228,167,24)"/><text x="61.5481%" y="255.50">le..</text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (56 samples, 2.69%)</title><rect x="61.2981%" y="229" width="2.6923%" height="15" fill="rgb(228,143,12)"/><text x="61.5481%" y="239.50">le..</text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::push (64 samples, 3.08%)</title><rect x="61.0096%" y="277" width="3.0769%" height="15" fill="rgb(249,149,8)"/><text x="61.2596%" y="287.50">lem..</text></g><g><title>lemonvm_repl`&lt;T as core::convert::From&lt;T&gt;&gt;::from (4 samples, 0.19%)</title><rect x="70.1442%" y="229" width="0.1923%" height="15" fill="rgb(243,35,44)"/><text x="70.3942%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;T as core::convert::TryFrom&lt;U&gt;&gt;::try_from (62 samples, 2.98%)</title><rect x="68.6538%" y="245" width="2.9808%" height="15" fill="rgb(246,89,9)"/><text x="68.9038%" y="255.50">lem..</text></g><g><title>lemonvm_repl`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (27 samples, 1.30%)</title><rect x="70.3365%" y="229" width="1.2981%" height="15" fill="rgb(233,213,13)"/><text x="70.5865%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;T as core::convert::From&lt;T&gt;&gt;::from (11 samples, 0.53%)</title><rect x="71.1058%" y="213" width="0.5288%" height="15" fill="rgb(233,141,41)"/><text x="71.3558%" y="223.50"></text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::checked_add (65 samples, 3.12%)</title><rect x="71.6346%" y="245" width="3.1250%" height="15" fill="rgb(239,167,4)"/><text x="71.8846%" y="255.50">lem..</text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::overflowing_add (43 samples, 2.07%)</title><rect x="72.6923%" y="229" width="2.0673%" height="15" fill="rgb(209,217,16)"/><text x="72.9423%" y="239.50">l..</text></g><g><title>lemonvm_repl`&lt;usize as core::iter::range::Step&gt;::add_usize (160 samples, 7.69%)</title><rect x="67.1154%" y="261" width="7.6923%" height="15" fill="rgb(219,88,35)"/><text x="67.3654%" y="271.50">lemonvm_rep..</text></g><g><title>lemonvm_repl`core::cmp::impls::_&lt;impl core::cmp::PartialOrd for usize&gt;::lt (8 samples, 0.38%)</title><rect x="74.8077%" y="261" width="0.3846%" height="15" fill="rgb(220,193,23)"/><text x="75.0577%" y="271.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (4 samples, 0.19%)</title><rect x="75.3846%" y="245" width="0.1923%" height="15" fill="rgb(230,90,52)"/><text x="75.6346%" y="255.50"></text></g><g><title>lemonvm_repl`core::ptr::read (3 samples, 0.14%)</title><rect x="75.5769%" y="245" width="0.1442%" height="15" fill="rgb(252,106,19)"/><text x="75.8269%" y="255.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (29 samples, 1.39%)</title><rect x="77.6442%" y="229" width="1.3942%" height="15" fill="rgb(206,74,20)"/><text x="77.8942%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.67%)</title><rect x="78.3654%" y="213" width="0.6731%" height="15" fill="rgb(230,138,44)"/><text x="78.6154%" y="223.50"></text></g><g><title>lemonvm_repl`core::intrinsics::copy_nonoverlapping (33 samples, 1.59%)</title><rect x="80.7692%" y="213" width="1.5865%" height="15" fill="rgb(235,182,43)"/><text x="81.0192%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.82%)</title><rect x="81.5385%" y="197" width="0.8173%" height="15" fill="rgb(242,16,51)"/><text x="81.7885%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::read (70 samples, 3.37%)</title><rect x="79.0385%" y="229" width="3.3654%" height="15" fill="rgb(248,9,4)"/><text x="79.2885%" y="239.50">lem..</text></g><g><title>lemonvm_repl`core::ptr::write (10 samples, 0.48%)</title><rect x="82.4038%" y="229" width="0.4808%" height="15" fill="rgb(210,31,22)"/><text x="82.6538%" y="239.50"></text></g><g><title>lemonvm_repl`core::ptr::swap_nonoverlapping_one (156 samples, 7.50%)</title><rect x="75.7212%" y="245" width="7.5000%" height="15" fill="rgb(239,54,39)"/><text x="75.9712%" y="255.50">lemonvm_re..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.34%)</title><rect x="82.8846%" y="229" width="0.3365%" height="15" fill="rgb(230,99,41)"/><text x="83.1346%" y="239.50"></text></g><g><title>lemonvm_repl`core::mem::swap (169 samples, 8.12%)</title><rect x="75.1923%" y="261" width="8.1250%" height="15" fill="rgb(253,106,12)"/><text x="75.4423%" y="271.50">lemonvm_rep..</text></g><g><title>lemonvm_repl`core::num::_&lt;impl usize&gt;::checked_add (5 samples, 0.24%)</title><rect x="83.3173%" y="261" width="0.2404%" height="15" fill="rgb(213,46,41)"/><text x="83.5673%" y="271.50"></text></g><g><title>lemonvm_repl`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (408 samples, 19.62%)</title><rect x="64.1346%" y="277" width="19.6154%" height="15" fill="rgb(215,133,35)"/><text x="64.3846%" y="287.50">lemonvm_repl`core::iter::range:..</text></g><g><title>lemonvm_repl`core::ptr::swap_nonoverlapping_one (4 samples, 0.19%)</title><rect x="83.5577%" y="261" width="0.1923%" height="15" fill="rgb(213,28,5)"/><text x="83.8077%" y="271.50"></text></g><g><title>lemonvm_repl`core::mem::swap (3 samples, 0.14%)</title><rect x="83.7500%" y="277" width="0.1442%" height="15" fill="rgb(215,77,49)"/><text x="84.0000%" y="287.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.29%)</title><rect x="83.9904%" y="261" width="0.2885%" height="15" fill="rgb(248,100,22)"/><text x="84.2404%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (6 samples, 0.29%)</title><rect x="83.9904%" y="245" width="0.2885%" height="15" fill="rgb(208,67,9)"/><text x="84.2404%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.14%)</title><rect x="84.4712%" y="181" width="0.1442%" height="15" fill="rgb(219,133,21)"/><text x="84.7212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.34%)</title><rect x="84.4231%" y="197" width="0.3365%" height="15" fill="rgb(246,46,29)"/><text x="84.6731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.34%)</title><rect x="84.8558%" y="197" width="0.3365%" height="15" fill="rgb(246,185,52)"/><text x="85.1058%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (18 samples, 0.87%)</title><rect x="84.4231%" y="213" width="0.8654%" height="15" fill="rgb(252,136,11)"/><text x="84.6731%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (19 samples, 0.91%)</title><rect x="84.4231%" y="229" width="0.9135%" height="15" fill="rgb(219,138,53)"/><text x="84.6731%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 1.59%)</title><rect x="84.3269%" y="245" width="1.5865%" height="15" fill="rgb(211,51,23)"/><text x="84.5769%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.58%)</title><rect x="85.3365%" y="229" width="0.5769%" height="15" fill="rgb(247,221,28)"/><text x="85.5865%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.14%)</title><rect x="85.7692%" y="213" width="0.1442%" height="15" fill="rgb(251,222,45)"/><text x="86.0192%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (3 samples, 0.14%)</title><rect x="85.7692%" y="197" width="0.1442%" height="15" fill="rgb(217,162,53)"/><text x="86.0192%" y="207.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.53%)</title><rect x="85.9135%" y="245" width="0.5288%" height="15" fill="rgb(229,93,14)"/><text x="86.1635%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (7 samples, 0.34%)</title><rect x="86.1058%" y="229" width="0.3365%" height="15" fill="rgb(209,67,49)"/><text x="86.3558%" y="239.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::align (4 samples, 0.19%)</title><rect x="87.0192%" y="181" width="0.1923%" height="15" fill="rgb(213,87,29)"/><text x="87.2692%" y="191.50"></text></g><g><title>lemonvm_repl`core::num::NonZeroUsize::get (3 samples, 0.14%)</title><rect x="87.2596%" y="181" width="0.1442%" height="15" fill="rgb(205,151,52)"/><text x="87.5096%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_size (3 samples, 0.14%)</title><rect x="87.5962%" y="165" width="0.1442%" height="15" fill="rgb(253,215,39)"/><text x="87.8462%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.29%)</title><rect x="87.5000%" y="181" width="0.2885%" height="15" fill="rgb(221,220,41)"/><text x="87.7500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.43%)</title><rect x="87.7885%" y="181" width="0.4327%" height="15" fill="rgb(218,133,21)"/><text x="88.0385%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (22 samples, 1.06%)</title><rect x="88.2212%" y="181" width="1.0577%" height="15" fill="rgb(221,193,43)"/><text x="88.4712%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (13 samples, 0.62%)</title><rect x="88.6538%" y="165" width="0.6250%" height="15" fill="rgb(240,128,52)"/><text x="88.9038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.14%)</title><rect x="89.2788%" y="181" width="0.1442%" height="15" fill="rgb(253,114,12)"/><text x="89.5288%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (55 samples, 2.64%)</title><rect x="86.8269%" y="197" width="2.6442%" height="15" fill="rgb(215,223,47)"/><text x="87.0769%" y="207.50">le..</text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (61 samples, 2.93%)</title><rect x="86.6346%" y="213" width="2.9327%" height="15" fill="rgb(248,225,23)"/><text x="86.8846%" y="223.50">le..</text></g><g><title>lemonvm_repl`&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.43%)</title><rect x="90.1923%" y="197" width="0.4327%" height="15" fill="rgb(250,108,0)"/><text x="90.4423%" y="207.50"></text></g><g><title>lemonvm_repl`&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (7 samples, 0.34%)</title><rect x="90.2885%" y="181" width="0.3365%" height="15" fill="rgb(228,208,7)"/><text x="90.5385%" y="191.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.19%)</title><rect x="90.6250%" y="197" width="0.1923%" height="15" fill="rgb(244,45,10)"/><text x="90.8750%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (33 samples, 1.59%)</title><rect x="89.5673%" y="213" width="1.5865%" height="15" fill="rgb(207,125,25)"/><text x="89.8173%" y="223.50"></text></g><g><title>lemonvm_repl`core::ptr::unique::Unique&lt;T&gt;::cast (7 samples, 0.34%)</title><rect x="90.8173%" y="197" width="0.3365%" height="15" fill="rgb(210,195,18)"/><text x="91.0673%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::unique::Unique&lt;T&gt;::new_unchecked (4 samples, 0.19%)</title><rect x="90.9615%" y="181" width="0.1923%" height="15" fill="rgb(249,80,12)"/><text x="91.2115%" y="191.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 4.76%)</title><rect x="86.4423%" y="229" width="4.7596%" height="15" fill="rgb(221,65,9)"/><text x="86.6923%" y="239.50">lemonv..</text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.38%)</title><rect x="91.2019%" y="229" width="0.3846%" height="15" fill="rgb(235,49,36)"/><text x="91.4519%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::as_mut_ptr (6 samples, 0.29%)</title><rect x="91.2981%" y="213" width="0.2885%" height="15" fill="rgb(225,32,20)"/><text x="91.5481%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.19%)</title><rect x="91.8269%" y="165" width="0.1923%" height="15" fill="rgb(215,141,46)"/><text x="92.0769%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.53%)</title><rect x="92.0192%" y="165" width="0.5288%" height="15" fill="rgb(250,160,47)"/><text x="92.2692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.29%)</title><rect x="92.2596%" y="149" width="0.2885%" height="15" fill="rgb(216,222,40)"/><text x="92.5096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.14%)</title><rect x="92.4038%" y="133" width="0.1442%" height="15" fill="rgb(234,217,39)"/><text x="92.6538%" y="143.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (17 samples, 0.82%)</title><rect x="91.7788%" y="181" width="0.8173%" height="15" fill="rgb(207,178,40)"/><text x="92.0288%" y="191.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (18 samples, 0.87%)</title><rect x="91.7788%" y="197" width="0.8654%" height="15" fill="rgb(221,136,13)"/><text x="92.0288%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (134 samples, 6.44%)</title><rect x="86.4423%" y="245" width="6.4423%" height="15" fill="rgb(249,199,10)"/><text x="86.6923%" y="255.50">lemonvm_..</text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (27 samples, 1.30%)</title><rect x="91.5865%" y="229" width="1.2981%" height="15" fill="rgb(249,222,13)"/><text x="91.8365%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.20%)</title><rect x="91.6827%" y="213" width="1.2019%" height="15" fill="rgb(244,185,38)"/><text x="91.9327%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.24%)</title><rect x="92.6442%" y="197" width="0.2404%" height="15" fill="rgb(236,202,9)"/><text x="92.8942%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (180 samples, 8.65%)</title><rect x="84.2788%" y="261" width="8.6538%" height="15" fill="rgb(250,229,37)"/><text x="84.5288%" y="271.50">lemonvm_repl..</text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (189 samples, 9.09%)</title><rect x="83.8942%" y="277" width="9.0865%" height="15" fill="rgb(206,174,23)"/><text x="84.1442%" y="287.50">lemonvm_repl`..</text></g><g><title>lemonvm_repl`core::slice::_&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.34%)</title><rect x="92.9808%" y="277" width="0.3365%" height="15" fill="rgb(211,33,43)"/><text x="93.2308%" y="287.50"></text></g><g><title>lemonvm_repl`&lt;&amp;mut alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.14%)</title><rect x="93.3654%" y="261" width="0.1442%" height="15" fill="rgb(245,58,50)"/><text x="93.6154%" y="271.50"></text></g><g><title>lemonvm_repl`&lt;core::slice::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.24%)</title><rect x="93.5096%" y="261" width="0.2404%" height="15" fill="rgb(244,68,36)"/><text x="93.7596%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (5 samples, 0.24%)</title><rect x="93.7500%" y="261" width="0.2404%" height="15" fill="rgb(232,229,15)"/><text x="94.0000%" y="271.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.14%)</title><rect x="94.1346%" y="229" width="0.1442%" height="15" fill="rgb(254,30,23)"/><text x="94.3846%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (3 samples, 0.14%)</title><rect x="94.2788%" y="181" width="0.1442%" height="15" fill="rgb(235,160,14)"/><text x="94.5288%" y="191.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (4 samples, 0.19%)</title><rect x="94.2788%" y="197" width="0.1923%" height="15" fill="rgb(212,155,44)"/><text x="94.5288%" y="207.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.24%)</title><rect x="94.2788%" y="213" width="0.2404%" height="15" fill="rgb(226,2,50)"/><text x="94.5288%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (5 samples, 0.24%)</title><rect x="94.5673%" y="181" width="0.2404%" height="15" fill="rgb(234,177,6)"/><text x="94.8173%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::alloc::dealloc (4 samples, 0.19%)</title><rect x="94.6154%" y="165" width="0.1923%" height="15" fill="rgb(217,24,9)"/><text x="94.8654%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.14%)</title><rect x="94.6635%" y="149" width="0.1442%" height="15" fill="rgb(220,13,46)"/><text x="94.9135%" y="159.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (18 samples, 0.87%)</title><rect x="94.0385%" y="261" width="0.8654%" height="15" fill="rgb(239,221,27)"/><text x="94.2885%" y="271.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (17 samples, 0.82%)</title><rect x="94.0865%" y="245" width="0.8173%" height="15" fill="rgb(222,198,25)"/><text x="94.3365%" y="255.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (13 samples, 0.62%)</title><rect x="94.2788%" y="229" width="0.6250%" height="15" fill="rgb(211,99,13)"/><text x="94.5288%" y="239.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (7 samples, 0.34%)</title><rect x="94.5673%" y="213" width="0.3365%" height="15" fill="rgb(232,111,31)"/><text x="94.8173%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.34%)</title><rect x="94.5673%" y="197" width="0.3365%" height="15" fill="rgb(245,82,37)"/><text x="94.8173%" y="207.50"></text></g><g><title>lemonvm_repl`liblemonvm::vm::VMClosure::clean_stack_values (34 samples, 1.63%)</title><rect x="93.3173%" y="277" width="1.6346%" height="15" fill="rgb(227,149,46)"/><text x="93.5673%" y="287.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.34%)</title><rect x="95.2404%" y="181" width="0.3365%" height="15" fill="rgb(218,36,50)"/><text x="95.4904%" y="191.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.19%)</title><rect x="95.3846%" y="165" width="0.1923%" height="15" fill="rgb(226,80,48)"/><text x="95.6346%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_from_slice (11 samples, 0.53%)</title><rect x="95.1923%" y="197" width="0.5288%" height="15" fill="rgb(238,224,15)"/><text x="95.4423%" y="207.50"></text></g><g><title>lemonvm_repl`core::slice::_&lt;impl [T]&gt;::iter (3 samples, 0.14%)</title><rect x="95.5769%" y="181" width="0.1442%" height="15" fill="rgb(241,136,10)"/><text x="95.8269%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (6 samples, 0.29%)</title><rect x="95.7692%" y="117" width="0.2885%" height="15" fill="rgb(208,32,45)"/><text x="96.0192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.29%)</title><rect x="95.7692%" y="101" width="0.2885%" height="15" fill="rgb(207,135,9)"/><text x="96.0192%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.24%)</title><rect x="95.8173%" y="85" width="0.2404%" height="15" fill="rgb(206,86,44)"/><text x="96.0673%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.19%)</title><rect x="95.8654%" y="69" width="0.1923%" height="15" fill="rgb(245,177,15)"/><text x="96.1154%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.14%)</title><rect x="95.9135%" y="53" width="0.1442%" height="15" fill="rgb(206,64,50)"/><text x="96.1635%" y="63.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.38%)</title><rect x="95.7212%" y="133" width="0.3846%" height="15" fill="rgb(234,36,40)"/><text x="95.9712%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (3 samples, 0.14%)</title><rect x="96.2981%" y="117" width="0.1442%" height="15" fill="rgb(213,64,8)"/><text x="96.5481%" y="127.50"></text></g><g><title>lemonvm_repl`&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 1.54%)</title><rect x="95.0962%" y="245" width="1.5385%" height="15" fill="rgb(210,75,36)"/><text x="95.3462%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::slice::_&lt;impl [T]&gt;::to_vec (31 samples, 1.49%)</title><rect x="95.1442%" y="229" width="1.4904%" height="15" fill="rgb(229,88,21)"/><text x="95.3942%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::slice::hack::to_vec (31 samples, 1.49%)</title><rect x="95.1442%" y="213" width="1.4904%" height="15" fill="rgb(252,204,47)"/><text x="95.3942%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.91%)</title><rect x="95.7212%" y="197" width="0.9135%" height="15" fill="rgb(208,77,27)"/><text x="95.9712%" y="207.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (19 samples, 0.91%)</title><rect x="95.7212%" y="181" width="0.9135%" height="15" fill="rgb(221,76,26)"/><text x="95.9712%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.91%)</title><rect x="95.7212%" y="165" width="0.9135%" height="15" fill="rgb(225,139,18)"/><text x="95.9712%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.91%)</title><rect x="95.7212%" y="149" width="0.9135%" height="15" fill="rgb(230,137,11)"/><text x="95.9712%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (9 samples, 0.43%)</title><rect x="96.2019%" y="133" width="0.4327%" height="15" fill="rgb(212,28,1)"/><text x="96.4519%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (4 samples, 0.19%)</title><rect x="96.4423%" y="117" width="0.1923%" height="15" fill="rgb(248,164,17)"/><text x="96.6923%" y="127.50"></text></g><g><title>lemonvm_repl`&lt;liblemonvm::binary::function::Function as core::clone::Clone&gt;::clone (35 samples, 1.68%)</title><rect x="95.0481%" y="261" width="1.6827%" height="15" fill="rgb(222,171,42)"/><text x="95.2981%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::extend_with (4 samples, 0.19%)</title><rect x="96.8269%" y="229" width="0.1923%" height="15" fill="rgb(243,84,45)"/><text x="97.0769%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.14%)</title><rect x="97.1154%" y="165" width="0.1442%" height="15" fill="rgb(252,49,23)"/><text x="97.3654%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (3 samples, 0.14%)</title><rect x="97.1154%" y="149" width="0.1442%" height="15" fill="rgb(215,19,7)"/><text x="97.3654%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.14%)</title><rect x="97.1154%" y="133" width="0.1442%" height="15" fill="rgb(238,81,41)"/><text x="97.3654%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::pad_to_align (3 samples, 0.14%)</title><rect x="97.3558%" y="149" width="0.1442%" height="15" fill="rgb(210,199,37)"/><text x="97.6058%" y="159.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (10 samples, 0.48%)</title><rect x="97.2596%" y="165" width="0.4808%" height="15" fill="rgb(244,192,49)"/><text x="97.5096%" y="175.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (5 samples, 0.24%)</title><rect x="97.5000%" y="149" width="0.2404%" height="15" fill="rgb(226,211,11)"/><text x="97.7500%" y="159.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.82%)</title><rect x="97.0192%" y="181" width="0.8173%" height="15" fill="rgb(236,162,54)"/><text x="97.2692%" y="191.50"></text></g><g><title>lemonvm_repl`alloc::vec::from_elem (25 samples, 1.20%)</title><rect x="96.7308%" y="261" width="1.2019%" height="15" fill="rgb(220,229,9)"/><text x="96.9808%" y="271.50"></text></g><g><title>lemonvm_repl`&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (23 samples, 1.11%)</title><rect x="96.8269%" y="245" width="1.1058%" height="15" fill="rgb(250,87,22)"/><text x="97.0769%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.91%)</title><rect x="97.0192%" y="229" width="0.9135%" height="15" fill="rgb(239,43,17)"/><text x="97.2692%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (19 samples, 0.91%)</title><rect x="97.0192%" y="213" width="0.9135%" height="15" fill="rgb(231,177,25)"/><text x="97.2692%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.91%)</title><rect x="97.0192%" y="197" width="0.9135%" height="15" fill="rgb(219,179,1)"/><text x="97.2692%" y="207.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.14%)</title><rect x="97.9808%" y="197" width="0.1442%" height="15" fill="rgb(238,219,53)"/><text x="98.2308%" y="207.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (6 samples, 0.29%)</title><rect x="97.9327%" y="261" width="0.2885%" height="15" fill="rgb(232,167,36)"/><text x="98.1827%" y="271.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (6 samples, 0.29%)</title><rect x="97.9327%" y="245" width="0.2885%" height="15" fill="rgb(244,19,51)"/><text x="98.1827%" y="255.50"></text></g><g><title>lemonvm_repl`core::ptr::drop_in_place (5 samples, 0.24%)</title><rect x="97.9808%" y="229" width="0.2404%" height="15" fill="rgb(224,6,22)"/><text x="98.2308%" y="239.50"></text></g><g><title>lemonvm_repl`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.24%)</title><rect x="97.9808%" y="213" width="0.2404%" height="15" fill="rgb(224,145,5)"/><text x="98.2308%" y="223.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.19%)</title><rect x="98.3173%" y="229" width="0.1923%" height="15" fill="rgb(234,130,49)"/><text x="98.5673%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (3 samples, 0.14%)</title><rect x="98.3654%" y="213" width="0.1442%" height="15" fill="rgb(254,6,2)"/><text x="98.6154%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::alloc::exchange_malloc (7 samples, 0.34%)</title><rect x="98.2692%" y="245" width="0.3365%" height="15" fill="rgb(208,96,46)"/><text x="98.5192%" y="255.50"></text></g><g><title>lemonvm_repl`&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.34%)</title><rect x="98.7500%" y="165" width="0.3365%" height="15" fill="rgb(239,3,39)"/><text x="99.0000%" y="175.50"></text></g><g><title>lemonvm_repl`alloc::alloc::alloc (4 samples, 0.19%)</title><rect x="98.8942%" y="149" width="0.1923%" height="15" fill="rgb(233,210,1)"/><text x="99.1442%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.14%)</title><rect x="98.9423%" y="133" width="0.1442%" height="15" fill="rgb(244,137,37)"/><text x="99.1923%" y="143.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::array (7 samples, 0.34%)</title><rect x="99.2788%" y="165" width="0.3365%" height="15" fill="rgb(240,136,2)"/><text x="99.5288%" y="175.50"></text></g><g><title>lemonvm_repl`core::alloc::layout::Layout::repeat (5 samples, 0.24%)</title><rect x="99.3750%" y="149" width="0.2404%" height="15" fill="rgb(239,18,37)"/><text x="99.6250%" y="159.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::grow (22 samples, 1.06%)</title><rect x="98.7019%" y="181" width="1.0577%" height="15" fill="rgb(218,185,22)"/><text x="98.9519%" y="191.50"></text></g><g><title>lemonvm_repl`liblemonvm::vm::VMClosure::new_closure (33 samples, 1.59%)</title><rect x="98.2212%" y="261" width="1.5865%" height="15" fill="rgb(225,218,4)"/><text x="98.4712%" y="271.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::push (25 samples, 1.20%)</title><rect x="98.6058%" y="245" width="1.2019%" height="15" fill="rgb(230,182,32)"/><text x="98.8558%" y="255.50"></text></g><g><title>lemonvm_repl`alloc::vec::Vec&lt;T&gt;::reserve (24 samples, 1.15%)</title><rect x="98.6538%" y="229" width="1.1538%" height="15" fill="rgb(242,56,43)"/><text x="98.9038%" y="239.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 1.11%)</title><rect x="98.7019%" y="213" width="1.1058%" height="15" fill="rgb(233,99,24)"/><text x="98.9519%" y="223.50"></text></g><g><title>lemonvm_repl`alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (23 samples, 1.11%)</title><rect x="98.7019%" y="197" width="1.1058%" height="15" fill="rgb(234,209,42)"/><text x="98.9519%" y="207.50"></text></g><g><title>lemonvm_repl`liblemonvm::vm::value::Value::from_constant (102 samples, 4.90%)</title><rect x="94.9519%" y="277" width="4.9038%" height="15" fill="rgb(227,7,12)"/><text x="95.2019%" y="287.50">lemonv..</text></g><g><title>lemonvm_repl`std::rt::lang_start::_{{closure}} (2,079 samples, 99.95%)</title><rect x="0.0000%" y="325" width="99.9519%" height="15" fill="rgb(245,203,43)"/><text x="0.2500%" y="335.50">lemonvm_repl`std::rt::lang_start::_{{closure}}</text></g><g><title>lemonvm_repl`lemonvm_repl::main (2,079 samples, 99.95%)</title><rect x="0.0000%" y="309" width="99.9519%" height="15" fill="rgb(238,205,33)"/><text x="0.2500%" y="319.50">lemonvm_repl`lemonvm_repl::main</text></g><g><title>lemonvm_repl`liblemonvm::vm::interpreter::interpreter (2,066 samples, 99.33%)</title><rect x="0.6250%" y="293" width="99.3269%" height="15" fill="rgb(231,56,7)"/><text x="0.8750%" y="303.50">lemonvm_repl`liblemonvm::vm::interpreter::interpreter</text></g><g><title>all (2,080 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(244,186,29)"/><text x="0.2500%" y="431.50"></text></g><g><title>lemonvm_repl`0x1 (2,080 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(234,111,31)"/><text x="0.2500%" y="415.50">lemonvm_repl`0x1</text></g><g><title>libdyld.dylib`start (2,080 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(241,149,10)"/><text x="0.2500%" y="399.50">libdyld.dylib`start</text></g><g><title>lemonvm_repl`main (2,080 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,206,44)"/><text x="0.2500%" y="383.50">lemonvm_repl`main</text></g><g><title>lemonvm_repl`std::rt::lang_start (2,080 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(251,153,30)"/><text x="0.2500%" y="367.50">lemonvm_repl`std::rt::lang_start</text></g><g><title>lemonvm_repl`std::rt::lang_start_internal (2,080 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(239,152,38)"/><text x="0.2500%" y="351.50">lemonvm_repl`std::rt::lang_start_internal</text></g></svg></svg>